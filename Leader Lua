local socket = require("socket")

-- Function to send UDP messages
function send_udp_message(message, ip, port)
    local udp = socket.udp()
    udp:setpeername(ip, port)
    udp:send(message)
    udp:close()
end

local follower_drone_ip = "FOLLOWER_DRONE_IP" -- Replace with the IP of the follower drone
local follower_drone_port = FOLLOWER_DRONE_PORT -- Replace with the port for receiving data on the follower drone

-- Function to read location from AHRS
function read_location()
    local current_location = ahrs:get_location() 

    if current_location then
        local latitude = current_location:lat() * 1e-7
        local longitude = current_location:lng() * 1e-7
        local altitude = current_location:alt() * 1e-2

        return latitude, longitude, altitude
    else
        return nil, nil, nil
    end
end

while true do
    -- Get current location data
    local lat, lon, alt = read_location()

    if lat and lon and alt then
        local location_message = string.format("%f,%f,%f", lat, lon, alt)
        send_udp_message(location_message, follower_drone_ip, follower_drone_port)
        print("Sent location data: " .. location_message)
    else
        print("Location data not available.")
    end

    socket.sleep(1) -- Wait for 1 second
end
