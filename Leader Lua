local socket = require("socket")
math.randomseed(os.time())

-- Function to generate a random MAC address
function get_mac_address()
    local chars = 'ABCDEF0123456789'
    local length = 12
    local mac = ''
    for i = 1, length do
        local index = math.random(1, #chars)
        mac = mac .. chars:sub(index, index)
        if i % 2 == 0 and i < length then
            mac = mac .. ':'
        end
    end
    return mac
end

-- Function to send UDP messages
function send_udp_message(message, ip, port)
    local udp = socket.udp()
    udp:setpeername(ip, port)
    udp:send(message)
    udp:close()
end

local udp_ip = "127.0.0.1"
local udp_port = 12346
local mac_address = get_mac_address()
local drone_ids = {1, 2, 3, 4} -- Drone IDs
local master_drone_id = 1 -- Start with drone 1 as the master

while true do
    for _, drone_id in ipairs(drone_ids) do
        -- Simulate a random failure of the master drone
        if drone_id == master_drone_id and math.random() < 0.1 then
            print("Drone " .. master_drone_id .. " has failed! Electing a new master...")
            repeat
                master_drone_id = drone_ids[math.random(#drone_ids)]
            until master_drone_id ~= drone_id

            local new_master_message = "NEW_MASTER," .. master_drone_id
            send_udp_message(new_master_message, udp_ip, udp_port)
            print("New master drone: " .. master_drone_id)
        end

        local lat = math.random(-90, 90)
        local lon = math.random(-180, 180)
        local alt = math.random(1, 1000)

        local mavlink_message = string.format("MAV,%s,%d,%f,%f,%f", mac_address, drone_id, lat, lon, alt)
        send_udp_message(mavlink_message, udp_ip, udp_port)
        print("Sent data from Drone " .. drone_id .. ": " .. mavlink_message)

        socket.sleep(1) -- Wait for 1 second
    end
end
